{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","console","log","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","tweetsEl"],"mappings":"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","file":"static/js/main.96c9dcf0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { loadTweets } from \"../lookup\";\r\n\r\nexport function TweetsComponent(props) {\r\n  const textAreaRef = React.createRef();\r\n  const [newTweets, setNewTweets] = useState([]);\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    // console.log(event);\r\n    const newVal = textAreaRef.current.value;\r\n    // console.log(newVal)\r\n    let tempNewTweets = [...newTweets];\r\n    // change this to a server side call\r\n    tempNewTweets.unshift({\r\n      content: newVal,\r\n      likes: 0,\r\n      id: 50,\r\n    });\r\n    setNewTweets(tempNewTweets);\r\n    textAreaRef.current.value = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      <div className=\"col-12 mb-3\">\r\n        <form onSubmit={handleSubmit}>\r\n          <textarea\r\n            ref={textAreaRef}\r\n            required={true}\r\n            className=\"form-control\"\r\n          ></textarea>\r\n          <button type=\"submit\" className=\"btn btn-primary my-3\">\r\n            Tweet\r\n          </button>\r\n        </form>\r\n      </div>\r\n      <TweetsList newTweets={newTweets} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport function TweetsList(props) {\r\n  const [tweetsInit, setTweetsInit] = useState([]);\r\n  const [tweets, setTweets] = useState([]);\r\n  // console.log(props.newTweets)\r\n  // setTweetsInit([...props.newTweets].concat(tweetsInit)) - infinite loop\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEffect for insert new tweets - run more then one time\")\r\n    const final = [...props.newTweets].concat(tweetsInit);\r\n    if (final.length !== tweets.length) {\r\n      setTweets(final);\r\n    }\r\n  }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n  useEffect(() => {\r\n    // do my lookup\r\n    const myCallback = (response, status) => {\r\n      // console.log(response, status)\r\n      if (status === 200) {\r\n        setTweetsInit(response);\r\n      } else {\r\n        alert(\"There was an error\");\r\n      }\r\n    };\r\n    loadTweets(myCallback);\r\n  }, []);\r\n\r\n  return tweets.map((item, index) => {\r\n    return (\r\n      <Tweet\r\n        tweet={item}\r\n        className=\"my-5 py-5 border bg-white text-dark\"\r\n        key={`${index}-{item.id}`}\r\n      />\r\n    );\r\n  });\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n  const { tweet, action } = props;\r\n  const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n  const [userLike, setUserLike] = useState(\r\n    tweet.userLike === true ? true : false\r\n  );\r\n  const className = props.className\r\n    ? props.className\r\n    : \"btn btn-primary btn-sm\";\r\n  const actionDisplay = action.display ? action.display : \"Action\";\r\n\r\n  const handleClick = (event) => {\r\n    event.preventDefault();\r\n    if (action.type === \"like\") {\r\n      if (userLike === true) {\r\n        // perhaps I Unlike it?\r\n        setLikes(likes - 1);\r\n        setUserLike(false);\r\n      } else {\r\n        setLikes(tweet.likes + 1);\r\n        setUserLike(true);\r\n      }\r\n    }\r\n  };\r\n\r\n  const display =\r\n    action.type === \"like\" ? `${likes} ${actionDisplay}` : actionDisplay;\r\n  return (\r\n    <button className={className} onClick={handleClick}>\r\n      {display}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport function Tweet(props) {\r\n  const { tweet } = props;\r\n  const className = props.className\r\n    ? props.className\r\n    : \"col-10 mx-auto col-md-6\";\r\n  const action = { type: \"like\", display: \"Likes\" };\r\n  return (\r\n    <div className={className}>\r\n      <p>\r\n        {tweet.id} - {tweet.content}\r\n      </p>\r\n      <div className=\"btn btn-group\">\r\n        <ActionBtn tweet={tweet} action={action} />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"unlike\", display: \"Unlike\" }}\r\n        />\r\n        <ActionBtn\r\n          tweet={tweet}\r\n          action={{ type: \"retweet\", display: \"Retweet\" }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","\r\nexport function loadTweets (callback) {\r\n    const xhr = new XMLHttpRequest() // xhr = SomeClass() -> equivalent in Python\r\n    const method = 'GET' // \"POST\"\r\n    const url = \"http://localhost:8000/api/tweets/\"\r\n    const responseType = \"json\"\r\n  \r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (e) {\r\n      console.log(e)\r\n      callback({\"message\":\"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n}","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponent} from './tweets'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TweetsComponent } from './tweets';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById(\"tweetme-2\")\nif (tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl)\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}